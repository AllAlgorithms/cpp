//Divisible Subset
//https://www.codechef.com/status/DIVSUBS
//Divsub is a famous programming question. The idea is pigeonhole princliple.
//Example: 3 4 3 5 2 3
//Naive approach is by exponential time finding pairs with 1 element only then 2 element only and so on.
//Any such problem can be illustrated as (1+x^3)(1+x^4)(1+x^3)(1+x^5)(1+x^2)(1+x^3) solving this will give terms having powers of all subsets we just need to apply % N = 0.
//It can be solved in O(NlogN) by Fast Fourier Transform or simply in O(N^2)
//https://www.youtube.com/watch?v=QQQpOa3aXew
//Itterate all array elements and apply % N and record it in the array of vector below.
//0   1   2   3   4   5
//            0
//Then 4
//0   1   2   3   4   5
//                1
//Then in 4 to 3 so 4 + 3 % N
//0   1   2   3   4   5
//    0,1     0   1
//and so on.
//a[]     =      3    4    3    5    2    3
//b[]     = 0    3    7    10   15   17   20
//b[]     = 0    3    1    4    3    5    2
//temp[]  =      2    6    1,4  3    5  
//This is pigeonhole senerio in every case any temp arr will have two element. end - start i.e. 4 - 1 = 3 so 3 elements that are 2nd 3rd and 4th (4 + 3 + 5) % 6 = 0
#include <bits/stdc++.h>
using namespace std;

#define MOD 1000000000
typedef long long ll;
typedef unsigned long long ull;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int t;
    cin >> t;
    while(t--)
    {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) cin >> a[i];

        ll b[n + 1];
        b[0] = 0;
        vector<ll> temp[n];
        temp[b[0] % n].push_back(0);
        for(int i=1; i<=n; i++)
        {
            b[i] = b[i - 1] + a[i - 1];
            temp[b[i] % n].push_back(i);
        }
        ll start, end;
        for(int i=0; i<n; i++)
        {
            if(temp[i].size() >=2 )
            {
                start = temp[i][0];
                end = temp[i][1];
            }
        }
        cout << (end - start) << endl;
        for(int i = start + 1; i <= end; i++)
            cout << i << " ";
        
        cout << endl;
    }
    return 0;
}
