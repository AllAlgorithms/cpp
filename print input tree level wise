#include <iostream>
#include <vector>
#include <queue>
using namespace std;

template <typename T>
class TreeNode {
   public:
    T data;
    vector<TreeNode<T>*> children;

    TreeNode(T data) { this->data = data; }

    ~TreeNode() {
        for (int i = 0; i < children.size(); i++) {
            delete children[i];
        }
    }
};


TreeNode<int>* takeInputLevelWise() {
    int rootData;
    cin >> rootData;
    TreeNode<int>* root = new TreeNode<int>(rootData);

    queue<TreeNode<int>*> pendingNodes;

    pendingNodes.push(root);
    while (pendingNodes.size() != 0) {
        TreeNode<int>* front = pendingNodes.front();
        pendingNodes.pop();
        int numChild;
        cin >> numChild;
        for (int i = 0; i < numChild; i++) {
            int childData;
            cin >> childData;
            TreeNode<int>* child = new TreeNode<int>(childData);
            front->children.push_back(child);
            pendingNodes.push(child);
        }
    }

    return root;
}
#include<queue>
void printLevelWise(TreeNode<int>* root) {
    queue<TreeNode<int>*>pendingnodes;
    pendingnodes.push(root);
    while(pendingnodes.size()!=0)
    {
        TreeNode<int>*Front=pendingnodes.front();
        pendingnodes.pop();
        cout<<Front->data<<":";
        if(Front->children.size()==0)
            cout<<endl;
        else
        {
        for(int i=0;i<Front->children.size();i++)
        {   
            if(i==Front->children.size()-1)
                cout<<Front->children[i]->data<<endl;
            else
            {
            cout<<Front->children[i]->data<<",";
            }
            TreeNode<int>* child= Front->children[i];
            pendingnodes.push(child);
            
        }
        }
        
    }
    
    
}


int main() {
    TreeNode<int>* root = takeInputLevelWise();
    printLevelWise(root);
}
